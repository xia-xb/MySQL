# 进阶7子查询

含义：出现在其他语句中的select语句，称为子查询或内查询

外部的查询语句，称为主查询或外查询

```sql
select first_name from employees where
department_id in(
	select department_id from departments
	where location_id=1700
)
```

分类

- 按子查询出现的位置
  - select后面（仅支持标量子查询）
  - from后面（支持表子查询）
  - ==where或having后面（标量子查询（单行），列子查询（多行）     行子查询）==
  - exists后面（相关子查询）（表子查询）
- 按结果集的行列数不同
  - 标量子查询（结果集只有一行一列）
  - 列子查询（结果集只有一列多行）
  - 行子查询（结果集一行多列）
  - 表子查询（结果集一般为多行多列）

## where或having后面

- 标量子查询（单行子查询）
- 列子查询（多行子查询）
- 行子查询（多列多行）

特点：

- 子查询放在小括号内
- 子查询一般放在条件的右侧
- 标量子查询，一般搭配着单行操作符使用(> < >= <= =)
- 列子查询，一般搭配着多行操作符使用(in any/some all)
- 子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果

### 标量子查询

```sql
#谁的工资比Abee高
#查询Abel的工资
select salary
from employees
where last_name ='Abel';
#查询员工的信息，满足salary>1的结果
select *
from employees
where salary>(
	select salary
    from employees
    whwere last_name='Abel'
);

#返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资
#查询141号员工的job_id
select job_id
from employees
where employee_id=141;
#查询143号员工的salary
select salary 
from employees
where employee_id=143;
#查询员工的姓名，job_id和工资，要求job_id>1的结果并且salary>2的结果
select last_name,job_id,salary
from employees
where job_id=(
	select job_id
	from employees
	where employee_id=141
)and salary>(
    select salary 
    from employees
    where employee_id=143
);

#返回公司工资最少的员工的last_name，job_id和salary
#查询公司的最低工资
select min(salary)
from employees;
#查询last_name，job_id和salary，要求salary=1的结果
select last_name,job_id,salary
from employees
where salary=(
    select min(salary)
    from employees
);

#查询最低工资大于50号部门最低工资的部门id和其最低工资
#查询50号部门的最低工资
select min(salary)
from employees
where department_id=50;
#查询每个部门的最低工资
select min(salary)
from employees
group by department_id;
#2基础上筛选，满足min(salary)>1的结果
select min(salary)
from employees
group by department_id
having min(salary)>(
    select min(salary)
    from employees
    where department_id=50
);
```

==非法使用标量子查询情况：子查询结果不是一行一列==

### 列子查询（多行子查询）

返回多行

使用多行比较操作符

![image-20210707152310730](piture/image-20210707152310730.png)

```sql
#返回location_id是1400或1700的部门中的所有员工姓名
#查询location_id是1400或1700的部门编号
select department_id
from department
where location_id in (1400,1700);
#查询员工姓名，要求部门编号是1列表中的某一个
select last_name
from employees
where department_id in(
    select department_id
    from department
    where location_id in (1400,1700)
);

#返回其他工种中比job_id为IT_PROG工种任一工资低的员工的：员工号、姓名、job_id以及salary
#查询job_id为IT_PROG工种任一工资
select distinct salary
from employee
where job_id='IT_PROG';
#查询员工号、姓名、job_id以及salary，要求salary<1中任意一个
select employee_id,last_name,job_id,salary
from employees
where salry<any(
    select distinct salary
    from employee
    where job_id='IT_PROG'
) and job_id !='IT_PROG';

#返回其他工种中比job_id为IT_PROG工种所有工资都低的员工的员工号、姓名、job_id以及salary
select employee_id,last_name,job_id,salary
from employees
where salary<all(
	select salary
    from employees
    where job_id='IT_PROG'
) and job_id !='IT_PROG';
```

### 行子查询（结果集一行多列或多行多列）

```sql
#查询员工编号最小并且工资最高的员工信息
select *
from employees
where (employee_id,salary)=(
	select min(employee_id),max(salary)
    from employees;
)
```

## select后面

==仅仅支持标量子查询==

```sql
#查询每个部门的员工个数
select d.*,(
	select count(*)
    from employees as e
    wehre e.department_id=d.department_id
)as 个数
from departments as d;

#查询员工号=102的部门名
select (
	select department_name
    from departments as d
    inner join employees as e
    on d.department_id=e.department_id
    where e.employee_id=102
) as 部门名;
```

## from后面

==将子查询结果充当一张表，要求必须取别名==

```sql
#查询每个部门的平均工资的工资等级
#查询每个部门的平均工资
select avg(salary),department_id
from employees
group by department_id;
#连接1的结果集和job_grades表，筛选条件平均工资between lowest_sal and highest_sal
select ag_dep.*,g.grade_level
from (
    select avg(salary) as ag,department_id
    from employees
    group by department_id
) as ag_dep
inner join job_grades as g
on ad_dep.ag between lowest_gal and highest_sal;
```

## exists后面（相关子查询）

语法

```sql
exists(完整的查询语句)
结果：
1或0
```



```sql
select exist(select employee_id from employees where salary=30000);
```

```sql
#查询有员工的部门名
select department_name
from daprtments as d
where exists(
	select *
    from employees as e
    where d.department_id =e.department_id
);

select department_name
from departments as d
where d.department_id in(
	select department_id
    from employees
);

#查询没有女朋友的男神信息
#in
select bo.*
from boys as bo
where bo.id not in(
	select boyfriend_id
    from beauty
);
#exists
select bo.*
from boys as bo
where not exists(
	select boyfriend_id
    from beauty as b
    where bo.id=b.boyfriend_id;
)
```

